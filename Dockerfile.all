# Combined Dockerfile - Frontend + Backend in single container
# This is useful for simpler deployments where both services run together
FROM node:20-alpine AS base

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Install dependencies for sharp and Alpine compatibility
RUN apk add --no-cache \
    libc6-compat \
    python3 \
    make \
    g++

WORKDIR /app

# ============================================
# Dependencies stage - install all dependencies
# ============================================
FROM base AS deps

# Copy root package files for workspace resolution
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Copy all workspace package.json files
COPY shared/package.json ./shared/
COPY frontend/package.json ./frontend/
COPY backend/package.json ./backend/

# Install all dependencies (including devDependencies for build)
RUN pnpm install --frozen-lockfile

# ============================================
# Builder stage - compile all packages
# ============================================
FROM base AS builder

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/shared/node_modules ./shared/node_modules
COPY --from=deps /app/frontend/node_modules ./frontend/node_modules
COPY --from=deps /app/backend/node_modules ./backend/node_modules

# Copy source code
COPY shared ./shared
COPY frontend ./frontend
COPY backend ./backend

# Build shared package first (both frontend and backend depend on it)
WORKDIR /app/shared
RUN pnpm build

# Build backend
WORKDIR /app/backend
RUN pnpm build

# Build frontend with Next.js environment variables
WORKDIR /app/frontend
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production
RUN pnpm build

# ============================================
# Production stage - runtime for both services
# ============================================
FROM base AS production

WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV FRONTEND_PORT=3000
ENV BACKEND_PORT=4000

# Copy root package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY shared/package.json ./shared/
COPY frontend/package.json ./frontend/
COPY backend/package.json ./backend/

# Install production dependencies only
RUN pnpm install --frozen-lockfile --prod

# Copy compiled shared package
COPY --from=builder /app/shared/dist ./shared/dist

# Copy backend compiled code and fonts
COPY --from=builder /app/backend/dist ./backend/dist
COPY backend/fonts ./backend/fonts

# Copy frontend Next.js build output
COPY --from=builder /app/frontend/.next ./frontend/.next
COPY --from=builder /app/frontend/public ./frontend/public
COPY --from=builder /app/frontend/next.config.ts ./frontend/next.config.ts

# Install PM2 for process management (to run both services)
RUN pnpm add -g pm2

# Create PM2 ecosystem file for managing both services
RUN echo '{\n\
  "apps": [\n\
    {\n\
      "name": "backend",\n\
      "cwd": "/app/backend",\n\
      "script": "dist/server.js",\n\
      "env": {\n\
        "NODE_ENV": "production",\n\
        "PORT": "4000"\n\
      }\n\
    },\n\
    {\n\
      "name": "frontend",\n\
      "cwd": "/app/frontend",\n\
      "script": "node_modules/next/dist/bin/next",\n\
      "args": "start -p 3000",\n\
      "env": {\n\
        "NODE_ENV": "production",\n\
        "PORT": "3000",\n\
        "NEXT_TELEMETRY_DISABLED": "1"\n\
      }\n\
    }\n\
  ]\n\
}' > /app/ecosystem.config.json

# Expose both ports
EXPOSE 3000 4000

# Health check for both services
HEALTHCHECK --interval=30s --timeout=5s --start-period=15s --retries=3 \
    CMD node -e "\
      const http = require('http');\
      const checks = [\
        {port: 3000, path: '/'},\
        {port: 4000, path: '/api/barcode/generate'}\
      ];\
      let pending = checks.length;\
      let failed = false;\
      checks.forEach(({port, path}) => {\
        http.get({host: 'localhost', port, path}, (r) => {\
          if (r.statusCode !== 200 && r.statusCode !== 405) failed = true;\
          if (--pending === 0) process.exit(failed ? 1 : 0);\
        }).on('error', () => {\
          failed = true;\
          if (--pending === 0) process.exit(1);\
        });\
      });\
    "

# Start both services using PM2
CMD ["pm2-runtime", "start", "/app/ecosystem.config.json"]
