import JsBarcode from "jsbarcode"
import type { BarcodeConfig } from "@/types/barcode"

export interface BarcodeGenerationOptions {
  data: string
  configuration: BarcodeConfig
  filename: string
}

export interface GeneratedBarcode {
  dataUrl: string
  filename: string
}

/**
 * Convert cm or inches to pixels (assuming 96 DPI)
 */
const convertToPixels = (value: number, unit: "cm" | "inches"): number => {
  const DPI = 96
  if (unit === "cm") {
    return Math.round((value / 2.54) * DPI)
  }
  // inches
  return Math.round(value * DPI)
}

/**
 * Generate a 1D barcode (Code128, EAN-13, EAN-8, UPC-A, Code39)
 */
export const generate1DBarcode = (options: BarcodeGenerationOptions): GeneratedBarcode | null => {
  const { data, configuration, filename } = options

  try {
    // Create a canvas element
    const canvas = document.createElement("canvas")
    const width = convertToPixels(configuration.dimensions.width, configuration.dimensions.unit)
    const height = convertToPixels(configuration.dimensions.height, configuration.dimensions.unit)

    // Map barcode type to JsBarcode format
    const formatMap: Record<string, string> = {
      code128: "CODE128",
      ean13: "EAN13",
      ean8: "EAN8",
      upca: "UPC",
      code39: "CODE39",
    }

    const format = formatMap[configuration.type] || "CODE128"

    // Generate barcode with JsBarcode
    JsBarcode(canvas, data, {
      format,
      width: configuration.options.stretch ? width / 100 : 2,
      height: configuration.options.stretch ? height * 0.7 : height * 0.5,
      displayValue: configuration.options.showText,
      text: data,
      font: configuration.font.family,
      fontSize: configuration.font.size,
      textMargin: 8,
      margin: 10,
      background: "#ffffff",
      lineColor: "#000000",
    })

    // Convert canvas to data URL
    const dataUrl = canvas.toDataURL("image/png")

    return { dataUrl, filename }
  } catch (error) {
    console.error("Error generating 1D barcode:", error)
    return null
  }
}

/**
 * Generate a QR code
 */
export const generateQRCode = (options: BarcodeGenerationOptions): GeneratedBarcode | null => {
  const { filename } = options

  try {
    // For QR codes, we'll use a library in the component
    // This function returns the configuration for the QR component
    return {
      dataUrl: "", // Will be generated by QRCode component
      filename,
    }
  } catch (error) {
    console.error("Error generating QR code:", error)
    return null
  }
}

/**
 * Generate barcode based on type
 */
export const generateBarcode = (options: BarcodeGenerationOptions): GeneratedBarcode | null => {
  const { configuration } = options

  if (configuration.type === "qr") {
    return generateQRCode(options)
  }

  return generate1DBarcode(options)
}

/**
 * Generate multiple barcodes
 */
export const generateBarcodes = async (
  dataList: string[],
  configuration: BarcodeConfig
): Promise<GeneratedBarcode[]> => {
  const results: GeneratedBarcode[] = []

  for (let i = 0; i < dataList.length; i++) {
    const data = dataList[i]
    const filename = `barcode_${data}_${configuration.dimensions.width}x${configuration.dimensions.height}${configuration.dimensions.unit}.png`

    const result = generateBarcode({ data, configuration, filename })
    if (result) {
      results.push(result)
    }

    // If dual mode is enabled, generate second version
    if (configuration.dualMode && configuration.dualDimensions) {
      const dualConfig: BarcodeConfig = {
        ...configuration,
        dimensions: configuration.dualDimensions,
        font: configuration.dualFont || configuration.font, // Use dualFont if available
        dualMode: false, // Prevent infinite recursion
      }
      const dualFilename = `barcode_${data}_${dualConfig.dimensions.width}x${dualConfig.dimensions.height}${dualConfig.dimensions.unit}.png`

      const dualResult = generateBarcode({
        data,
        configuration: dualConfig,
        filename: dualFilename,
      })
      if (dualResult) {
        results.push(dualResult)
      }
    }
  }

  return results
}
